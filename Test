--[[

Creator: Ebola Man
Script Helpers: Jay
Testers/Helpers: Con
References: Metal Gear Rising Revengeance (2013)


Supported Games:
https://www.roblox.com/games/5847495283  NTJJG

Future Support Games:
https://www.roblox.com/games/3260590327  TDS
https://www.roblox.com/games/10449761463 TSB

Keybinds:
N - Xray, ESP (everyone), NoClip  (!view)
P - Print Enemy/Gang Value        (No Command)

Commands:
!view
!griddy
!ezota
!target
!clear target
(Stand commands: !tw, !sf, ...)
!AdminGUI
!spawn Dummy
!spawn stop

]]--

if game.GameId == "5847495283" then
    local Mode = "Manual" -- Modes: Automatic, Manual, Training
    local Help = false -- SubMode for Automatic

local Vauz = {"Sir_Thomas13", "EnderGamerHD123", "Piotressi", "ofer666", "ofer555", "TF2_s1axton", "Spasmatic", "Conjafdfdf", "ActPierce", "Bleronssj3", "BleronSSJ4", "fwfwffwfwfwfwfwfwf", "HQmicrowave", "ZemaitisGN93", "SelflessGowther", "MushZakTheGreat", "dontbetoxicbenice1", "sapouti_amogus", "sapouti", "sapoutiALT", "LccTheCool", "Stopjustst", "cansokul", "sx_mori", "Guilalem", "TheEidolons", "Misha_Fortod", "memo1234567892123", "YoungThund3r_Yt"}
local Zonkeria = {"wwwwww532wwww423wwww", "mihai2501", "aradishere", "zonklord_2023", "swagmaster111", "mitsosmagka", "themanspasmatic"}
local Nebula = {"eliteplayer274", "TheBroz222"}
local CWR = {"GenPowd", "iGoSheeshin", "hikiapina", "albasil0", "JosipBrozTi_to1", "amagrind", "EIT0RO", "Strangerafaelalberto", "Temporary_Tempest", "areoncan", "OutlastingSins", "Aquadorix", "0XMO", "tahahaimid", "29_ranx", "kazuii9", "khronoVVV", "rainbow2425141", "subbaji", "z_Yaru", "Stygiophxbia"}
local Absolute = {"Absdwsaqq", "Bruh_pon106"}
local Egg = {"secretytb12", "hackl343", "IMGIArda", "Noobs_King194", "veba_doktoru123"}
local Jaguar = {"dishonboo2", "dishonboo", "Wegakings", "mongkhon6"}
local Xyris = {"Asto1foSupremacy", "xD3S1R3D_x", "XReaperNeskX", "M0stskiledblackoily", "BIZARREKAR2", "00keinname00", "beatsaber243244", "KanoyuXyris", "EnvyKanoyu", "Custl1n", "DepF1z02", "DinamiteRYAN2487", "DeafaultyBOI961", "Edy12081", "edesanyama", "hsbsbl", "IApologizeforselling", "IzoTodo", "Jt030901", "KvnKanek1", "LiMoNLightYT", "nateisabot1", "nXhBnBvqInSaNe21", "ocean794", "Pedr0989898", "r_rtxo", "rejanwwe", "ROBOX9365", "SadekTodo", "Tagz898", "TheMobilzedPlayer", "WorldStrongJJ"}
local Enemies = {"K6ZOS", "mushanrainbow", "pafu777", "hamaDRF", "Zimwee123alt0", "ExtremlyBored", "pro_efe351", "puma100win", "davrichard", "TaT_Merge", "ZhangHao1023", "coffeehedXD", "SoulChung", "gooreallyv", "Azopikol03", "ypidr15", "FiXeR_iGrOmAn", "an1mob2", "fusionboysyetube", "ZeinKilledBy", "Adam_Pro095", "ieatpaini", "IntroIsSoWeird", "fawsrd_v2q2e", "aid011w", "iggtft745", "9_Spy", "JokerBaDjokesl", "sk3yz3", "GigaChadVsQuandingl2", "abdalla656533", "mortals2222", "emrepanda356", "all_QcOK243fK", "pokeytonk06", "lIlIYOLSiIiNDiRiIlI", "ofcuareannoying", "Baconcolboy", "robloxminigammer", "logititan", "KiryuKazuma2022", "pluhgod", "younessazri", "LaggingAcounts", "FrostNovaxz", "Zero56621", "skakunEMAE", "CliipBot", "lp_gg089", "disGodHimself", "dinozane11", "ma345678as", "Alexboy_gamer3", "Iam_Garpe", "runnerofobby", "Kranvagn123", "tacobeater80", "Springtraj", "godzillaismoney", "Peteon120Fps", "ttirtoly090", "viniciusbox45678", "geam312", "apodexqew", "boibanban", "Kubkoselepsky463", "alien256123", "yawbuoyun", "saintlywinner32", "diegosxddd", "UnholyButcher", "zuml_7383", "jakefury1", "vittelel", "twvc92467nzfkh5zfwv6", "Swictos", "SalmaTheKiller12"}
local TSBDivine = {"eldoctor1243", "zenny2rich", "Crygely25", "AlexGreen35", "FlixReq", "Devil_Masteri", "Zlatangoat2"}

local M1 = mouse1click()
local Target = game.Players.LocalPlayer["Target Name"].Value
local View = false
local Dummy = Instance.new("BoolValue", game.Players.LocalPlayer)
local vim = game:GetService('VirtualInputManager')
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local StarterGui = game:GetService("StarterGui")
local PlayerGui = LocalPlayer.PlayerGui
local Admin = StarterGui.GUIs.Core.Handler.Admin
local AdminFrame = StarterGui.GUIs.Core.Handler.AdminFrame
local Core = PlayerGui.GUIs.Core
local MenuFrame = PlayerGui.GUIs.Core.MenuFrame
Admin.Parent = MenuFrame
AdminFrame.Parent = Core
local function WSBypass() -- Credits to CapGay
    if not game.Players.LocalPlayer.Character:FindFirstChild("NoWSDetect") then
        NoWSD = Instance.new("Folder", game.Players.LocalPlayer.Character)
        NoWSD.Name = "NoWSDetect"
        if game.Players.LocalPlayer.Character:FindFirstChild("ServerSpeed") then
            game.Players.LocalPlayer.Character.ServerSpeed:Destroy()
        end
    end
end
RunService.Heartbeat:Connect(WSBypass)

local function Speed()
    if game.Players.LocalPlayer.Character:FindFirstChild("NoWSDetect") then
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 40
    else
        warn("WS Bypass missing!")
    end
end
RunService.Heartbeat:Connect(Speed)

local function TrainImmortality()
    pcall(function()
        game:GetService("Workspace").Camera.Train.TrainCore.TouchInterest:Destroy()
    end)
end
RunService.Heartbeat:Connect(TrainImmortality)

local function AntiKB()
    for i,velocity in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
        if velocity.Name == "BodyVelocity" then
            velocity:Destroy()
        end
    end
end
RunService.Heartbeat:Connect(AntiKB)

local TargetName = Instance.new("StringValue", game.Players.LocalPlayer)
TargetName.Name = "Target Name"
local function Target(message, speaker)
	if message:sub(1, 8):lower() == "!target " then
		local playerName = message:sub(9):lower()
		local foundPlayer = nil

		for _, player in ipairs(game.Players:GetPlayers()) do
			if player.Name:lower():sub(1, #playerName) == playerName then
				foundPlayer = player
				TargetName.Value = player.Name
				break
			end
		end

		if foundPlayer then
			print("Target found:", TargetName.Value)
		else
			print("Target not found!")
		end
	end
end
game.Players.PlayerAdded:Connect(function(player)
	player.Chatted:Connect(function(message)
		Target(message, player)
	end)
end)

local function ClearTarget(message)
    if message == "!clear target" then
        if game.Players.LocalPlayer["Target Name"].Value ~= "" then
            game.Players.LocalPlayer["Target Name"].Value = ""
        end
    end
end
player.Chatted:Connect(ClearTarget)

local function AutoGG()
    for i,v in pairs(game.Players:GetDescendants()) do
        if v.Name == "HitBy" and v.Value == game.Players.LocalPlayer then
            for i,hp in pairs(game.Players:GetDescendants()) do
                if hp.Name == "Humanoid" and v.Health == 0 then
                    local args = {
                        [1] = "gg!",
                        [2] = "All"
                    }
                
                    game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest"):FireServer(unpack(args))
                    hp:Destroy()
                end
            end
        end
    end
end
RunService.Heartbeat:Connect(AutoGG)

local function DummySpawner(message)
    if message == "!spawn Dummy" then
        Dummy = true
        while wait() do
            if Dummy == true then
                game.Players.LocalPlayer.Character.Head:Destroy()
                wait(2)
                while wait() do
                    local args = {
                        [1] = "SelectStand",
                        [2] = "Bohemian Rhapsody Rework",
                        [3] = 1
                    }
            
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Basic"):FireServer(unpack(args))
                end
            elseif Dummy == false then
                break
            end
        end
    end
end
player.Chatted:Connect(DummySpawner)
local function DummyStop(message)
    if message == "!spawn stop" then
        Dummy = false
    end
end
player.Chatted:Connect(DummyStop)

local function Hunting()
    if Mode == "Automatic" then
        for i,v in pairs(game.Players:GetDescendants()) do
            if v.Name == Target and not game.Players.LocalPlayer.Name then
                for i,no in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                    if no.CanCollide == true then
                        no.CanCollide = false
                    end
                end
                game.Players.LocalPlayer.Character.Humanoid.WalkToPoint = v.Character.HumanoidRootPart.Position
                local ESP = Instance.new("Highlight", v.Character)
                ESP.FillColor = Color3.new(1, 0, 0)
                ESP.FillTransparency = 0.5
                ESP.OutlineColor = Color3.new(1,0,0)
                ESP.Name = "ESP"
            end
        end
    end
end
RunService.Heartbeat:Connect(Hunting)

local function Aimbot()
    if Mode == "Automatic" then
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")

        local function getPlayer(Target)
            local player = Players:FindFirstChild(Target)
            if player then
                return player
            else
                return nil
            end
        end

        local function focusOnPlayer(playerName)
            local targetPlayer = getPlayer(playerName)
            if not targetPlayer then
                print("Player not found")
                return
            end

            local localPlayer = Players.LocalPlayer
            local stareLoop

            stareLoop = RunService.RenderStepped:Connect(function()
                if localPlayer.Character and localPlayer.Character.PrimaryPart and targetPlayer.Character then
                    local chrPos = localPlayer.Character.PrimaryPart.Position
                    local tPos = targetPlayer.Character:FindFirstChild("HumanoidRootPart").Position
                    if tPos then
                        local modTPos = Vector3.new(tPos.X, chrPos.Y, tPos.Z)
                        local newCF = CFrame.new(chrPos, modTPos)
                        localPlayer.Character:SetPrimaryPartCFrame(newCF)
                    else
                        stareLoop:Disconnect()
                    end
                else
                    stareLoop:Disconnect()
                end
            end)
        end
    end
end

local function AutoTarget()
    if Mode == "Automatic" and Target == "" then
        for _,v in ipairs(Vauz) do
            if game.Players.LocalPlayer.Hit.HitBy.Value ~= v then
                Target = game.Players.LocalPlayer.Hit.HitBy.Value
            else
                warn("The player, who attacked you, is in Vauz and hence shall not be listed as your enemy!")
            end
        end
    end
end
RunService.Heartbeat:Connect(AutoTarget)

local function EnemyPrinter()
	for i,v in pairs(game.Players:GetChildren()) do
		for _, vauz in ipairs(Vauz) do
			if v.Name == vauz then
                if v:FindFirstChild("Relation (Gang)") then
                    v["Relation (Gang)"]:Destroy()
                    local Gang = Instance.new("StringValue")
                    Gang.Name = "Relation (Gang)"
                    Gang.Parent = v
                    Gang.Value = "Vauz"
                else
                    local Gang = Instance.new("StringValue")
                    Gang.Name = "Relation (Gang)"
				    Gang.Parent = v
				    Gang.Value = "Vauz"
                end
			end
		end
	for _, cwr in ipairs(CWR) do
		if v.Name == cwr then
			if v:FindFirstChild("Relation (Gang)") then
                v["Relation (Gang)"]:Destroy()
                local Gang = Instance.new("StringValue")
                Gang.Name = "Relation (Gang)"
                Gang.Parent = v
                Gang.Value = "CWR"
            else
                local Gang = Instance.new("StringValue")
                Gang.Name = "Relation (Gang)"
                Gang.Parent = v
                Gang.Value = "CWR"
            end
		end
	    end
	for _, nebula in ipairs(Nebula) do
		if v.Name == nebula then
			if v:FindFirstChild("Relation (Gang)") then
                v["Relation (Gang)"]:Destroy()
                local Gang = Instance.new("StringValue")
                Gang.Name = "Relation (Gang)"
                Gang.Parent = v
                Gang.Value = "Nebula"
            else
                local Gang = Instance.new("StringValue")
                Gang.Name = "Relation (Gang)"
                Gang.Parent = v
                Gang.Value = "Nebula"
            end
		end
	    end
	for _, absolute in ipairs(Absolute) do
		if v.Name == absolute then
			if v:FindFirstChild("Relation (Gang)") then
                v["Relation (Gang)"]:Destroy()
                local Gang = Instance.new("StringValue")
                Gang.Name = "Relation (Gang)"
                Gang.Parent = v
                Gang.Value = "Absolute/10N/ApAz"
            else
                local Gang = Instance.new("StringValue")
                Gang.Name = "Relation (Gang)"
                Gang.Parent = v
                Gang.Value = "Absolute/10N/ApAz"
            end
		end
		end
	for _, egg in ipairs(Egg) do
		if v.Name == egg then
			if v:FindFirstChild("Relation (Gang)") then
                v["Relation (Gang)"]:Destroy()
                local Gang = Instance.new("StringValue")
                Gang.Name = "Relation (Gang)"
                Gang.Parent = v
                Gang.Value = "Egg"
            else
                local Gang = Instance.new("StringValue")
                Gang.Name = "Relation (Gang)"
                Gang.Parent = v
                Gang.Value = "Egg"
            end
		end
		end
	for _, jaguar in ipairs(Jaguar) do
		if v.Name == jaguar then
			if v:FindFirstChild("Relation (Gang)") then
                v["Relation (Gang)"]:Destroy()
                local Gang = Instance.new("StringValue")
                Gang.Name = "Relation (Gang)"
                Gang.Parent = v
                Gang.Value = "Jaguar"
            else
                local Gang = Instance.new("StringValue")
                Gang.Name = "Relation (Gang)"
                Gang.Parent = v
                Gang.Value = "Jaguar"
            end
		end
		end
	for _, xyris in ipairs(Xyris) do
		if v.Name == xyris then
			if v:FindFirstChild("Relation (Gang)") then
                v["Relation (Gang)"]:Destroy()
                local Gang = Instance.new("StringValue")
                Gang.Name = "Relation (Gang)"
                Gang.Parent = v
                Gang.Value = "Xyris"
            else
                local Gang = Instance.new("StringValue")
                Gang.Name = "Relation (Gang)"
                Gang.Parent = v
                Gang.Value = "Xyris"
            end
		end
		end
	for _, enemies in ipairs(Enemies) do
		if v.Name == enemies then
			if v:FindFirstChild("Relation (Gang)") then
                v["Relation (Gang)"]:Destroy()
                local Gang = Instance.new("StringValue")
                Gang.Name = "Relation (Gang)"
                Gang.Parent = v
                Gang.Value = "Enemy"
            else
                local Gang = Instance.new("StringValue")
                Gang.Name = "Relation (Gang)"
                Gang.Parent = v
                Gang.Value = "Enemy"
            end
		end
    end
end
end
RunService.Heartbeat:Connect(EnemyPrinter)
game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.P then
        EnemyPrinter()
        for i,v in pairs(game.Players:GetChildren()) do
            if v["Relation (Gang)"].Value == "Vauz" then
                print(v.Name, "is a member of Vauz.")
            elseif v["Relation (Gang)"].Value == "CWR" then
                warn(v.Name, "is a member of CWR!")
            elseif v["Relation (Gang)"].Value == "Nebula" then
                warn(v.Name, "is a member of Nebula!")
            elseif v["Relation (Gang)"].Value == "Absolute/10N/ApAz" then
                warn(v.Name, "is a member of Absolute/10N/ApAz!")
            elseif v["Relation (Gang)"].Value == "Egg" then
                warn(v.Name, "is a member of Egg!")
            elseif v["Relation (Gang)"].Value == "Jaguar" then
                warn(v.Name, "is a member of Jaguar!")
            elseif v["Relation (Gang)"].Value == "Xyris" then
                warn(v.Name, "is a member of Xyris!")
            elseif v["Relation (Gang)"].Value == "Enemy" then
                warn(v.Name, "is an Enemy!") 
            end
        end
    end
end)

local player = game.Players.LocalPlayer
local character = player.Character
local function AutoPB()
    if Mode == "Manual" then
    pcall(function()
        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            if otherPlayer ~= player then
                local otherCharacter = otherPlayer.Character
                if otherCharacter then
                    local distance = (otherCharacter.HumanoidRootPart.Position - character.HumanoidRootPart.Position).Magnitude
                    if distance < 30 then
                        local bufferValue = otherCharacter:FindFirstChild("Buffer")
                        if bufferValue and bufferValue.Value == "Heavy" then
                    	    wait(0.31)
						    local vim = game:GetService('VirtualInputManager')
						    vim:SendKeyEvent(true, Enum.KeyCode.F, false, nil)
                            wait(0.3)
						    vim:SendKeyEvent(false, Enum.KeyCode.F, false, nil)
                        end
                    end
                end
            end
        end
    end)
end
RunService.Heartbeat:Connect(AutoPB)

local function ViewFunction()
    View = true
    for i,esp in ipairs(game.Players:GetChildren()) do
        if not v.Character:FindFirstChild("ESP") then
            local highlight = Instance.new("Highlight")
            highlight.Name = "ESP"
            highlight.Parent = esp.Character
            highlight.FillColor = Color3.new(1, 0, 0)
            highlight.FillTransparency = 0.5
        end
        if esp.Parent == "Camera" then
            local highlight = Instance.new("Highlight")
            highlight.Name = "ESP"
            highlight.Parent = esp
            highlight.FillColor = Color3.new(1, 0, 0)
            highlight.FillTransparency = 0.5
        end
        if esp.
        end
    end
    for i,noclip in pairs(game.Players.LocalPlayer.Character) do
        if noclip.ClassName == "Part" or "MeshPart" and noclip.CanCollide == true then
            noclip.CanCollide = false
        end
    end
    for i,xray in pairs(game.Workspace.Map) do
        if xray.ClassName == "Part" then
            xray.Transparency = 0.6
        end
    end
    else
    if View == true then
        View = false
        for i,esp in pairs(game.Players:GetDescendants()) do
            if esp.Name == "ESP" then
                esp:Destroy()
            end
        end
        for i,noclip in pairs(game.Players.LocalPlayer.Character) do
            if noclip.ClassName == "Part" or "MeshPart" and noclip.CanCollide == false then
                noclip.CanCollide = true
            end
        end
        for i,xray in pairs(game.Workspace.Map) do
            if xray.ClassName == "Part" then
                xray.Transparency = 0
            end
        end
    end
end

game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.N then
        if View == false then
            ViewFunction()
        end
    end
end)
local function View(message)
    if message == "!view" then
        if View == false then
            ViewFunction()
        end
    end
end
player.Chatted:Connect(View)

local player = game.Players.LocalPlayer
local character = player.Character
local head = character.Head
local function onChatted(message) -- Made by CapGay (Ebola Man helped), Idea by Ebola Man
    if Mode == "Manual" or "Training" then
        local command, number = message:match("^;(%a+)%s?(%d*)$") -- Extract the command and number from the message

        if command == "sf" then
            local args = {
            [1] = "SelectStand",
            [2] = "Sticky Fingers",
            [3] = tonumber(number) or 1 -- Use the extracted number or default to 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Basic"):FireServer(unpack(args))
        elseif command == "tw" then
            local args = {
            [1] = "SelectStand",
            [2] = "The World",
            [3] = tonumber(number) or 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Basic"):FireServer(unpack(args))
        elseif command == "kc" then
            local args = {
            [1] = "SelectStand",
            [2] = "King Crimson",
            [3] = tonumber(number) or 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Basic"):FireServer(unpack(args))
        elseif command == "ger" then
            local args = {
            [1] = "SelectStand",
            [2] = "Gold Experience Requiem",
            [3] = tonumber(number) or 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Basic"):FireServer(unpack(args))
        elseif command == "cd" then
            local args = {
            [1] = "SelectStand",
            [2] = "Crazy Diamond",
            [3] = tonumber(number) or 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Basic"):FireServer(unpack(args))
        elseif command == "kq" then
            local args = {
            [1] = "SelectStand",
            [2] = "Killer Queen",
            [3] = tonumber(number) or 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Basic"):FireServer(unpack(args))
        elseif command == "ws" then
            local args = {
            [1] = "SelectStand",
            [2] = "Whitesnake",
            [3] = tonumber(number) or 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Basic"):FireServer(unpack(args))
        elseif command == "sp" then
            local args = {
            [1] = "SelectStand",
            [2] = "Star Platinum",
            [3] = tonumber(number) or 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Basic"):FireServer(unpack(args))
        elseif command == "hd" then
            local args = {
            [1] = "SelectStand",
            [2] = "Heaven's Door",
            [3] = tonumber(number) or 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Basic"):FireServer(unpack(args))
        elseif command == "tusk" then
            local args = {
            [1] = "SelectStand",
            [2] = "Tusk",
            [3] = tonumber(number) or 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Basic"):FireServer(unpack(args))
        elseif command == "sc" then
            local args = {
            [1] = "SelectStand",
            [2] = "Silver Chariot",
            [3] = tonumber(number) or 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Basic"):FireServer(unpack(args))
        elseif command == "th" then
            local args = {
            [1] = "SelectStand",
            [2] = "The Hand",
            [3] = tonumber(number) or 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Basic"):FireServer(unpack(args))
        elseif command == "bhr" then
            local args = {
            [1] = "SelectStand",
            [2] = "Bohemian Rhapsody Rework",
            [3] = tonumber(number) or 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Basic"):FireServer(unpack(args))
        elseif command == "bh" then
            game.Players.LocalPlayer.Stats.Stand.Value = "Bohemian Rhapsody"
        elseif command == "hamon" then
            local args = {
            [1] = "SelectStand",
            [2] = "Jonathan Joestar",
            [3] = tonumber(number) or 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Basic"):FireServer(unpack(args))
        elseif command == "vamp" then
            local args = {
            [1] = "SelectStand",
            [2] = "Dio Brando",
            [3] = tonumber(number) or 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Basic"):FireServer(unpack(args))
        elseif command == "anubis" then
            local args = {
            [1] = "SelectStand",
            [2] = "Anubis",
            [3] = tonumber(number) or 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Basic"):FireServer(unpack(args))
        elseif command == "yj" then
            local args = {
            [1] = "SelectStand",
            [2] = "Young Joseph",
            [3] = tonumber(number) or 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Basic"):FireServer(unpack(args))
        elseif command == "kars" then
            local args = {
            [1] = "SelectStand",
            [2] = "Kars",
            [3] = tonumber(number) or 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Basic"):FireServer(unpack(args))
    end
end 
player.Chatted:Connect(onChatted)

local function Griddy(message)
    if message == "!griddy" then
        local Anim = Instance.new("Animation")
        Anim.AnimationId = "rbxassetid://11148357117"
        animation = game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
        animation:Play()
    end
end
player.Chatted:Connect(Griddy)

local function Ezota(message)
    if message == "!ezota" then
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EzotaCreator/Ezota-Roblox-Script/main/test"))()
    end
end
player.Chatted:Connect(Ezota)

local function ModeSelector(message) -- Modes: Automatic, Manual, Training
  	if message == "!mode manual" then
    	local Mode = "Manual"
        print("Mode selected: Manual")
    elseif message == "!mode automatic" then
        local Mode = "Automatic"
        print("Mode selected: Automatic")
    elseif message == "!mode training" then
        local Mode = "Training"
        print("Mode selected: Training")
    else
        warn("Mode not found.")
  	end
end
player.Chatted:Connect(ModeSelector)

local function AdminGUI(message)
    if message == "!AdminGUI" then
        AdminFrame.Visible = true
    end
end
player.Chatted:Connect(AdminGUI)

local function TWCombo() -- E + M1s + R + Exterminate + X + E + M1s + R
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9) -- Time of 24.5 dmg for Barrage
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    if game.Players.LocalPlayer.Character.Humanoid.Health <= 100 then
        vim:SendKeyEvent(true, Enum.KeyCode.C, false, nil)
        vim:SendKeyEvent(false, Enum.KeyCode.C, false, nil)
    else
        vim:SendKeyEvent(true, Enum.KeyCode.R, false, nil)
        vim:SendKeyEvent(false, Enum.KeyCode.R, false, nil)
    end
end

local function KCCombo() -- E + m1s + R + X + E + m1s + R
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.X, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.X, false, nil)
    wait(0.3)
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.R, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.R, false, nil)
end

local function GERCombo() -- E + m1s + X + V + E + m1s + R
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.X, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.X, false, nil)
    wait(0.1)
    vim:SendKeyEvent(true, Enum.KeyCode.V, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.V, false, nil)
end

local function SFCombo() -- E + m1s + R + Pole + E + m1s + E + V
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.4)
    M1()
    wait(0.4)
    M1()
    wait(0.4)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    wait(0.1)
    vim:SendKeyEvent(true, Enum.KeyCode.V, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.V, false, nil)
end

local function CDCombo() -- E + m1s + R + V + X + E + m1s + C + R
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.35)
    M1()
    wait(0.35)
    M1()
    wait(0.35)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.V, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.V, false, nil)
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.C, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.C, false, nil)
end

local function KQCombo() -- E + m1s + E + X + E + m1s + X + V
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.4)
    M1()
    wait(0.4)
    M1()
    wait(0.4)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    vim:SendKeyEvent(true, Enum.KeyCode.X, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.X, false, nil)
end


local function WSCombo()
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.R, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.R, false, nil)
    wait(0.05)
    vim:SendKeyEvent(true, Enum.KeyCode.X, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.X, false, nil)
    wait(0.15)
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.R, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.R, false, nil)
end

local function SPCombo()
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.R, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.R, false, nil)
    wait(0.05)
    vim:SendKeyEvent(true, Enum.KeyCode.Two, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.Two, false, nil)
    vim:SendKeyEvent(true, Enum.KeyCode.C, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.C, false, nil)
    wait(0.2)
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.V, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.V, false, nil)
end

local function HDCombo()
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.R, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.R, false, nil)
    wait(0.05)
    vim:SendKeyEvent(true, Enum.KeyCode.C, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.C, false, nil)
    wait(0.15)
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.R, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.R, false, nil)
    vim:SendKeyEvent(true, Enum.KeyCode.Z, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.Z, false, nil)
end

local function TuskCombo()
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.R, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.R, false, nil)
    wait(0.05)
    vim:SendKeyEvent(true, Enum.KeyCode.C, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.C, false, nil)
    wait(0.15)
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.R, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.R, false, nil)
end

local function SCCombo()
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.R, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.R, false, nil)
    wait(0.05)
    vim:SendKeyEvent(true, Enum.KeyCode.C, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.C, false, nil)
    wait(0.15)
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    vim:SendKeyEvent(true, Enum.KeyCode.C, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.C, false, nil)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.V, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.V, false, nil)
    vim:SendKeyEvent(true, Enum.KeyCode.R, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.R, false, nil)
end

local function SCACombo()
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.R, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.R, false, nil)
    wait(0.05)
    vim:SendKeyEvent(true, Enum.KeyCode.C, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.C, false, nil)
    wait(0.15)
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    vim:SendKeyEvent(true, Enum.KeyCode.C, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.C, false, nil)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.V, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.V, false, nil)
end

local function THCombo()
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.R, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.R, false, nil)
    wait(0.05)
    vim:SendKeyEvent(true, Enum.KeyCode.X, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.X, false, nil)
    wait(0.15)
    vim:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
    wait(2.9)
    vim:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    wait(0.3)
    M1()
    vim:SendKeyEvent(true, Enum.KeyCode.V, false, nil)
    vim:SendKeyEvent(false, Enum.KeyCode.V, false, nil)
end
end
